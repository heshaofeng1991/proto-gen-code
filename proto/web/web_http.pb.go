// Code generated by protoc-gen-gin-http. DO NOT EDIT.
// versions:
// protoc-gen-gin-http 0.01
package web

import (
	conf "code.shihuo.cn/95fen-micro/ms-atom/conf"
	feign "code.shihuo.cn/95fen-micro/ms-atom/feign"
	rpc "code.shihuo.cn/95fen-micro/ms-atom/go95/rpc"
	blademaster "code.shihuo.cn/go/hms-components/net/http/blademaster"
	context "context"
	json "encoding/json"
	fmt "fmt"
	structs "github.com/fatih/structs"
	gjson "github.com/tidwall/gjson"
	url "net/url"
	reflect "reflect"
	strings "strings"
	sync "sync"
	testing "testing"
	time "time"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the gin-http package it is being compiled against.
var _ = new(blademaster.ClientConfig)
var _ = new(context.Context)
var _ = new(feign.Dao)
var _ = (conf.GateWayApi)
var _ = new(fmt.Stringer)
var _ = new(gjson.Type)
var _ = new(rpc.RpcHttpRoute)
var _ = new(json.Encoder)
var _ = new(reflect.Value)
var _ = new(strings.Reader)
var _ = new(structs.Field)
var _ = new(testing.T)
var _ = new(time.Duration)
var _ = new(url.Values)
var _ = new(sync.Once)

var AdminHttpRoutes = []rpc.RpcHttpRoute{
	{
		Method: "POST",
		Path:   "/v1/admin/brand_manager/create",
		Name:   "CreateBrand",
		InType: CreateBrandReq{},
	},
	{
		Method: "GET",
		Path:   "/v1/admin/brand_manager/get/{brand_id}",
		Name:   "GetBrandByID",
		InType: GetBrandByIDReq{},
	},
	{
		Method: "GET",
		Path:   "/v1/admin/brand_manager/bulk_get",
		Name:   "MultiGetBrand",
		InType: MultiGetBrandReq{},
	},
	{
		Method: "POST",
		Path:   "/v1/admin/brand_manager/remove",
		Name:   "RemoveBrand",
		InType: RemoveBrandReq{},
	},
	{
		Method: "POST",
		Path:   "/v1/admin/brand_manager/edit",
		Name:   "UpdateBrand",
		InType: UpdateBrandReq{},
	},
}

type AdminHttpTests interface {
	Test_CreateBrand(t *testing.T)
	Test_GetBrandByID(t *testing.T)
	Test_MultiGetBrand(t *testing.T)
	Test_RemoveBrand(t *testing.T)
	Test_UpdateBrand(t *testing.T)
}

func RunAdminHttpTests(t *testing.T, tg AdminHttpTests) {
	val_tg := reflect.ValueOf(tg)
	typ_tg := val_tg.Type()
	mth_run := reflect.ValueOf(t).MethodByName("Run")
	for i := 0; i < typ_tg.NumMethod(); i++ {
		mth_name := typ_tg.Method(i).Name
		if strings.Index(mth_name, "Test") != 0 {
			continue
		}
		mth_func := val_tg.Method(i)
		mth_run.Call([]reflect.Value{
			reflect.ValueOf(mth_name),
			reflect.ValueOf(mth_func.Interface()),
		})
	}
}

var _ AdminServer = new(AdminHttpClient)

var (
	AdminOnce       sync.Once
	AdminOnceClient *AdminHttpClient
)

type (
	AdminHttpClient struct {
		Feign       *feign.Dao
		GatewayApi  string
		ServiceName string
	}

	AdminOption func(client *AdminHttpClient)
)

func AdminGatewayApi(gatewayApi string) AdminOption {
	return func(client *AdminHttpClient) {
		client.GatewayApi = gatewayApi
	}
}

func AdminGatewayApiForTest(gatewayApi string) AdminOption {
	return func(client *AdminHttpClient) {
		if gatewayApi == "" {
			gatewayApi = "http://127.0.0.1:4040/"
		}
		client.GatewayApi = strings.TrimRight(gatewayApi, "/")
		client.ServiceName = ""
	}
}

func AdminServiceName(serviceName string) AdminOption {
	return func(client *AdminHttpClient) {
		client.ServiceName = serviceName
	}
}

func AdminServiceTimeOut(timeOut time.Duration) AdminOption {
	return func(client *AdminHttpClient) {
		client.Feign = feign.New(&blademaster.ClientConfig{Timeout: timeOut})
	}
}

func NewAdminHttpClientOnce(options ...AdminOption) *AdminHttpClient {
	AdminOnce.Do(func() {
		AdminOnceClient = &AdminHttpClient{
			Feign:       feign.New(&blademaster.ClientConfig{Timeout: 1 * time.Second}),
			GatewayApi:  conf.GateWayApi,
			ServiceName: "",
		}

		for _, option := range options {
			option(AdminOnceClient)
		}
	})

	return AdminOnceClient
}

func NewAdminHttpClient(options ...AdminOption) *AdminHttpClient {
	client := &AdminHttpClient{
		Feign:       feign.New(&blademaster.ClientConfig{Timeout: 1 * time.Second}),
		GatewayApi:  conf.GateWayApi,
		ServiceName: "",
	}

	for _, option := range options {
		option(client)
	}
	return client
}

func (c *AdminHttpClient) CreateBrand(ctx context.Context, in *CreateBrandReq) (*CreateBrandRsp, error) {
	var (
		out  = &CreateBrandRsp{}
		path = c.GatewayApi + c.ServiceName + "/v1/admin/brand_manager/create"
	)
	err := c.Feign.SimpleFeignPostJson(ctx, path, in, out, nil)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *AdminHttpClient) GetBrandByID(ctx context.Context, in *GetBrandByIDReq) (*GetBrandByIDRsp, error) {
	var (
		out  = &GetBrandByIDRsp{}
		path = c.GatewayApi + c.ServiceName + "/v1/admin/brand_manager/get/{brand_id}"
	)
	reqParam := make(map[string]string)
	if in != nil {
		b, err := json.Marshal(in)
		if err != nil {
			return nil, err
		}
		gjson.Parse(string(b)).ForEach(func(key, v gjson.Result) bool {
			reqParam[key.String()] = v.String()
			return true
		})
	}

	err := c.Feign.SimpleFeignGet(ctx, path, reqParam, out, url.Values{}, nil)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *AdminHttpClient) MultiGetBrand(ctx context.Context, in *MultiGetBrandReq) (*MultiGetBrandRsp, error) {
	var (
		out  = &MultiGetBrandRsp{}
		path = c.GatewayApi + c.ServiceName + "/v1/admin/brand_manager/bulk_get"
	)
	reqParam := make(map[string]string)
	if in != nil {
		b, err := json.Marshal(in)
		if err != nil {
			return nil, err
		}
		gjson.Parse(string(b)).ForEach(func(key, v gjson.Result) bool {
			reqParam[key.String()] = v.String()
			return true
		})
	}

	err := c.Feign.SimpleFeignGet(ctx, path, reqParam, out, url.Values{}, nil)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *AdminHttpClient) RemoveBrand(ctx context.Context, in *RemoveBrandReq) (*CommonRsp, error) {
	var (
		out  = &CommonRsp{}
		path = c.GatewayApi + c.ServiceName + "/v1/admin/brand_manager/remove"
	)
	err := c.Feign.SimpleFeignPostJson(ctx, path, in, out, nil)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *AdminHttpClient) UpdateBrand(ctx context.Context, in *UpdateBrandReq) (*CommonRsp, error) {
	var (
		out  = &CommonRsp{}
		path = c.GatewayApi + c.ServiceName + "/v1/admin/brand_manager/edit"
	)
	err := c.Feign.SimpleFeignPostJson(ctx, path, in, out, nil)
	if err != nil {
		return nil, err
	}
	return out, nil
}
